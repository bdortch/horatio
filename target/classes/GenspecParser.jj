/**
 *  Copyright 2011, 2012 Bill Dortch / RunningReds.org
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/*
 * A JavaCC grammar for a JSON-like Generation Specification file format.
 *
 * Extends JSON syntax by adding support for comments and use of
 * unquoted identifiers and identifier-like values.
 *
 */
 
options {
   STATIC = false;
   FORCE_LA_CHECK=true;
}
 
 
PARSER_BEGIN(GenspecParser)

package org.runningreds.horatio.parser.genspec;

import java.io.*;
import java.util.*;

import org.runningreds.horatio.parser.*;

public class GenspecParser {
    // these are mainly used to give better error positions
    Token nameToken, valueToken, typeToken;
    public String name;

    public GenspecParser(String name, Reader reader) {
        this(reader);
        this.name = name;
    }
    
    public GenspecParser(String name, InputStream stream) {
        this(stream);
        this.name = name;
    }

    public GenspecParser(String name, InputStream stream, String encoding) {
        this(stream, encoding);
        this.name = name;
    }

    static String tokenLoc(Token t) {
        if (t == null) {
            return "";
        } else {
            return " at line " + t.beginLine + ", column " + t.beginColumn;
        }
    }
    
    static void p(Object o) {
      System.out.println(o);
    }
}
PARSER_END(GenspecParser)

/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
| "#"  : IN_SINGLE_LINE_COMMENT
| "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}


TOKEN : /* LITERALS */
{
  < TRUE: "true" >
| < FALSE: "false" >
| < NULL: "null" >
}

/* LITERALS */

TOKEN :
{
  < INT_VAL:
        <DEC_VAL> (["l","L"])?
      | <HEX_VAL> (["l","L"])?
      | "0"
  >
|
  < #DEC_VAL: ("-")? ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_VAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < FLOAT_VAL:
       ("-")? (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHAR_VAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_VAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
//            | ["0"-"7"] ( ["0"-"7"] )?
//            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER: ["_", "A"-"Z", "a"-"z"] >
|
  < #DIGIT: ["0"-"9"] >
}

TOKEN :
{
  < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < COLON: ":" >
| < COMMA: "," >
}

Map<String,Object> Genspec() :
{
   Map<String,Object> genspec; 
}
{

    genspec=MapLiteral()
    
    <EOF>

    {
        return genspec; 
    }
}



Object Value() :
{
   Object v;
}
{
  ( 
      v=LongLiteral()
    | v=DoubleLiteral()
    | v=BoolLiteral()
    | v=StringLiteral() 
    | v=NullLiteral()
    | v=ListLiteral()
    | v=MapLiteral()
    | v=Name()
  )
  { return v; }
}
List<Object> ListLiteral() :
{
   List<Object> list = new ArrayList<Object>();
   Object v;
}
{
  ( valueToken="[" 
      [ v = Value()  {
          list.add(v);
       }
       ( LOOKAHEAD(2) "," 
           v = Value() {
             list.add(v);
           }
       )* 
      ]
    (LOOKAHEAD(2) "," "]" | "]")
    )
    { return list; }
} 

Map<String,Object> MapLiteral() :
{
    Map<String,Object> map = new HashMap<String,Object>();
    Token t = null;
    String k = null;
    Object v;
}
{
   ( valueToken="{" 
         [
            ( ( t=<IDENTIFIER> | k=StringLiteral() ) ":" v = Value() ) {
                if (t != null) {
                    k = t.image;
                    t = null;
                }
                map.put(k,v);
            }
            ( LOOKAHEAD(2) ","
              ( ( t=<IDENTIFIER> | k=StringLiteral() ) ":" v = Value() ) {
                  if (t != null) {
                      k = t.image;
                      t = null;
                  }
                  map.put(k,v); 
              }
            )*
         ]
    (LOOKAHEAD(2) "," "}" | "}")
   )
   { return map; }

}
String Name() : 
{
    Token seg;
    StringBuilder name = new  StringBuilder(32);
    nameToken = null;
}
{
   ( LOOKAHEAD(2) seg=<IDENTIFIER> "." {
        name.append(seg.image).append('.');
        if (nameToken==null) nameToken=seg;
    } )*
    seg=<IDENTIFIER> {
        if (nameToken==null)nameToken=seg;
        return name.length() == 0 ? seg.image : name.append(seg.image).toString();
    }
}
Long LongLiteral() :
{}
{
   valueToken=<INT_VAL> {
      try {
         return ParseUtil.parseLongLiteral(valueToken.image);
      } catch (NumberFormatException e) {
         throw new ParseException(e.getMessage() + tokenLoc(valueToken));
      }
   }
}
Double DoubleLiteral() :
{}
{
   valueToken=<FLOAT_VAL> {
      try {
         return Double.valueOf(valueToken.image);
      } catch (NumberFormatException e) {
         throw new ParseException(e.getMessage() + tokenLoc(valueToken));
      }
   }
}
String StringLiteral() :
{}
{
    valueToken=<STRING_VAL> {
       return ParseUtil.parseStringLiteral(valueToken.image);
    }

}
Object NullLiteral() :
{}
{
   valueToken="null"  {
      return null;
   }
}
Boolean BoolLiteral() :
{}
{
      valueToken="true" { return true; }
    | valueToken="false" { return false; }
}







