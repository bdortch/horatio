/* Generated By:JavaCC: Do not edit this line. ThriftParser.java */
package org.runningreds.horatio.parser.thrift;

import java.io.*;
import java.util.*;

import org.runningreds.horatio.*;
import org.runningreds.horatio.parser.*;
import org.runningreds.horatio.model.*;

public class ThriftParser implements ThriftParserConstants {

    private volatile ModelSet modelSet;
    private volatile ThriftModel model;


    // these are mainly used to give better error positions
    private Token nameToken, valueToken, typeToken;
    // allows struct members to reference struct (non-standard, not supported by Thrift proper)
    private StructType currStruct;
    // holds docComments for most recently parsed field id
    private List<String> fieldIdComments;


    public ThriftParser(ModelSet modelSet, String name, Reader reader) {
        this(reader);
        createModel(modelSet, name);
    }

    public ThriftParser(ModelSet modelSet, String name, InputStream stream) {
        this(stream);
        createModel(modelSet, name);
    }

    public ThriftParser(ModelSet modelSet, String name, InputStream stream, String encoding) {
        this(stream, encoding);
        createModel(modelSet, name);
    }

    private void createModel(ModelSet modelSet, String name) {
        if (modelSet == null) {
            modelSet = new ModelSet();
        }
        this.modelSet = modelSet;
        this.model = modelSet.createModel(name);
    }

    public ModelSet getModelSet() {
        return modelSet;
    }

    static String tokenLoc(Token t) {
        if (t == null) {
            return "";
        } else {
            return " at line " + t.beginLine + ", column " + t.beginColumn;
        }
    }

    static List<String> docComments(Token t) {
        if (t.specialToken != null && t.specialToken.image.startsWith("/**")) {
            return ParseUtil.parseDocComments(t.specialToken.image);
        }
        return null;
    }

// FIXME: see Java 1.5 grammar for handling generics/rshift collision
  final public ThriftModel Model() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAMESPACE:
      case INCLUDE:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAMESPACE:
        NamespaceDef();
        break;
      case INCLUDE:
        IncludeDef();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TYPEDEF:
      case STRUCT:
      case UNION:
      case EXCEPTION:
      case SERVICE:
      case ENUM:
      case CONST:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONST:
        ConstDef();
        break;
      case TYPEDEF:
        TypeDef();
        break;
      case ENUM:
        EnumDef();
        break;
      case STRUCT:
      case UNION:
        StructDef();
        break;
      case EXCEPTION:
        ExcepDef();
        break;
      case SERVICE:
        ServiceDef();
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
      {if (true) return model;}
    throw new Error("Missing return statement in function");
  }

  final public void IncludeDef() throws ParseException {
  Token nameToken = null;
    jj_consume_token(INCLUDE);
    nameToken = jj_consume_token(STRING_VAL);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
    case COMMA:
      EOL();
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
      String includeName = ParseUtil.parseStringLiteral(nameToken.image);
      String modelName = includeName.endsWith(".thrift") ? includeName.substring(0, includeName.length() - 7) : includeName;
      if (!modelSet.isModelLoaded(modelName) && modelSet.getModelPath() != null) {
          try {
              new ThriftParser(modelSet, modelName, modelSet.getModelPath().getChildRef(includeName)
                  .getInputStream()).Model();
          } catch (ModelException e) {
             {if (true) throw new ParseException(e.getMessage() + tokenLoc(nameToken));}
          } catch (StringFormatException e) {
             {if (true) throw new ParseException(e.getMessage() + tokenLoc(nameToken));}
          } catch (RuntimeException e) {
             {if (true) throw new ParseException(e.getMessage() + tokenLoc(nameToken));}
          }
      }
  }

  final public NamespaceDef NamespaceDef() throws ParseException {
  Token generator = null;
  String generatorName = null;
  String namespace;
    jj_consume_token(NAMESPACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
      generator = jj_consume_token(STAR);
      break;
    case IDENTIFIER:
      generatorName = Name();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    namespace = Name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
    case COMMA:
      EOL();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
      String name = generator == null ? generatorName : generator.image;
      try {
          NamespaceDef def = new NamespaceDef(model, name, namespace);
          model.addNamespace(def);
          {if (true) return def;}
      } catch (ModelException e) {
          {if (true) throw new ParseException(e.getMessage() + tokenLoc(generator));}
      }
    throw new Error("Missing return statement in function");
  }

  final public ConstDef ConstDef() throws ParseException {
    Token s;
    Type type;
    String name;
    Object value;
    s = jj_consume_token(CONST);
    type = DataType();
    name = Name();
    jj_consume_token(ASSIGN);
    value = Value();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
    case COMMA:
      EOL();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
        ConstDef def;
        try {
            def = new ConstDef(model, name, type, value, docComments(s));
        } catch (ModelException e) {
             {if (true) throw new ParseException(e.getMessage() + tokenLoc(valueToken));}
        }
        try {
            model.addConst(def);
        } catch (ModelException e) {
             {if (true) throw new ParseException(e.getMessage() + tokenLoc(nameToken));}
        }
        {if (true) return def;}
    throw new Error("Missing return statement in function");
  }

  final public void TypeDef() throws ParseException {
    Type type;
    Token newname;
    jj_consume_token(TYPEDEF);
    type = DataType();
    newname = jj_consume_token(IDENTIFIER);
        try {
            modelSet.registerType(model.qname(newname.image), type);
        } catch (ModelException e) {
            {if (true) throw new ParseException(e.getMessage() + tokenLoc(newname));}
        }
  }

  final public EnumType EnumDef() throws ParseException {
   Token s;
   EnumType def;
   Token enumName;
   Token elemName;
   Token elemVal = null;
    s = jj_consume_token(ENUM);
    enumName = jj_consume_token(IDENTIFIER);
    jj_consume_token(LBRACE);
     def = new EnumType(model, enumName.image, docComments(s));
    label_3:
    while (true) {
      elemName = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        elemVal = jj_consume_token(INT_VAL);
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
      case COMMA:
        EOL();
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
                    try {
                       if (elemVal == null) {
                           def.addElem(elemName.image);
                       } else {
                           def.addElem(elemName.image, Integer.parseInt(elemVal.image));
                           elemVal = null;
                       }
                    } catch (ModelException e) {
                        {if (true) throw new ParseException(e.getMessage() + tokenLoc(elemName));}
                    }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_3;
      }
    }
    jj_consume_token(RBRACE);
       try {
           model.addEnum(def);
       } catch (ModelException e) {
          {if (true) throw new ParseException(e.getMessage() + tokenLoc(enumName));}
       }
       {if (true) return def;}
    throw new Error("Missing return statement in function");
  }

  final public StructType StructDef() throws ParseException {
    Token s, name;
    StructType struct;
    FieldDef field;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRUCT:
      s = jj_consume_token(STRUCT);
      break;
    case UNION:
      s = jj_consume_token(UNION);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    name = jj_consume_token(IDENTIFIER);
    jj_consume_token(LBRACE);
       currStruct = struct = new StructType(model, name.image, s.kind == UNION, docComments(s));
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT_VAL:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_4;
      }
      field = FieldDef();
          try {
              struct.addField(field);
          } catch (ModelException e) {
              {if (true) throw new ParseException(e.getMessage() + tokenLoc(name));}
          }
    }
    jj_consume_token(RBRACE);
      try {
          model.addStruct(struct);
      } catch (ModelException e) {
          {if (true) throw new ParseException(e.getMessage() + tokenLoc(name));}
      }
      currStruct = null;
      {if (true) return struct;}
    throw new Error("Missing return statement in function");
  }

  final public ExceptionType ExcepDef() throws ParseException {
    Token s;
    Token t = null;
    ExceptionType excep;
    FieldDef field;
    s = jj_consume_token(EXCEPTION);
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(LBRACE);
       excep = new ExceptionType(model, t.image, docComments(s));
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT_VAL:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_5;
      }
      field = FieldDef();
          try {
              excep.addField(field);
          } catch (ModelException e) {
              {if (true) throw new ParseException(e.getMessage() + tokenLoc(t));}
          }
    }
    jj_consume_token(RBRACE);
      try {
          model.addException(excep);
      } catch (ModelException e) {
          {if (true) throw new ParseException(e.getMessage() + tokenLoc(t));}
      }
      {if (true) return excep;}
    throw new Error("Missing return statement in function");
  }

  final public ServiceDef ServiceDef() throws ParseException {
    Token s, svcName;
    String supName = null;
    ServiceDef service;
    Token oneway = null;
    Object type;
    Token funcName;
    FunctionDef func;
    FieldDef field;
    s = jj_consume_token(SERVICE);
    svcName = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      supName = Name();
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    jj_consume_token(LBRACE);
        ServiceDef supDef;
        if (supName == null) {
            supDef = null;
        } else {
            try {
                supDef = model.getService(supName);
            } catch (ModelException e) {
                {if (true) throw new ParseException(e.getMessage() + tokenLoc(nameToken));}
            }
        }
        service = new ServiceDef(model, svcName.image, supDef, docComments(s));
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL:
      case BYTE:
      case I16:
      case I32:
      case I64:
      case DOUBLE:
      case STRING:
      case BINARY:
      case MAP:
      case LIST:
      case SET:
      case VOID:
      case ONEWAY:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ONEWAY:
        oneway = jj_consume_token(ONEWAY);
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL:
      case BYTE:
      case I16:
      case I32:
      case I64:
      case DOUBLE:
      case STRING:
      case BINARY:
      case MAP:
      case LIST:
      case SET:
      case IDENTIFIER:
        type = DataType();
        break;
      case VOID:
        type = jj_consume_token(VOID);
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      funcName = jj_consume_token(IDENTIFIER);
      jj_consume_token(LPAREN);
            if (type instanceof Token) {
                type = Type.VOID;
            }
            func = new FunctionDef(service, funcName.image, (Type)type, oneway != null);
            oneway = null; // reset for next func

      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT_VAL:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_7;
        }
        field = FieldDef();
                try {
                    func.addField(field);
                } catch (ModelException e) {
                    {if (true) throw new ParseException(e.getMessage() + tokenLoc(nameToken));}
                }
      }
      jj_consume_token(RPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case THROWS:
        jj_consume_token(THROWS);
        jj_consume_token(LPAREN);
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INT_VAL:
            ;
            break;
          default:
            jj_la1[19] = jj_gen;
            break label_8;
          }
          field = FieldDef();
                  if (!field.getType().isException()) {
                      {if (true) throw new ParseException("throws arg is not an exception type: " + field.getType() + tokenLoc(typeToken));}
                  }
                  try {
                      func.addThrowsField(field);
                  } catch (ModelException e) {
                      {if (true) throw new ParseException(e.getMessage() + tokenLoc(nameToken));}
                  }
        }
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
      case COMMA:
        EOL();
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
            try {
                service.addFunction(func);
            } catch (ModelException e) {
                {if (true) throw new ParseException(e.getMessage() + tokenLoc(svcName));}
            }
    }
    jj_consume_token(RBRACE);
        try {
            model.addService(service);
        } catch (ModelException e) {
            {if (true) throw new ParseException(e.getMessage() + tokenLoc(svcName));}
        }
        {if (true) return service;}
    throw new Error("Missing return statement in function");
  }

  final public FieldDef FieldDef() throws ParseException {
  short id;
  String opt = null;
  Type type;
  Token name;
  Object value = FieldDef.UNSET_VALUE;
  Map<String,Object> annos = null;
    id = FieldID();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REQUIRED:
    case OPTIONAL:
      opt = Optionality();
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    type = DataType();
    name = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      value = Value();
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      annos = Annotations();
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
    case COMMA:
      EOL();
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
      try {
          // FIXME: token ID for optional/required?
          {if (true) return new FieldDef(id, name.image, type, !"optional".equals(opt), value, annos, fieldIdComments);}
      } catch (Exception e) {
          // FIXME: token loc for value?
          {if (true) throw new ParseException(e.getMessage() + tokenLoc(name));}
      }
    throw new Error("Missing return statement in function");
  }

  final public short FieldID() throws ParseException {
    short id;
    id = I16Literal();
    jj_consume_token(COLON);
     // Horatio does not currently support negative ids
     if (id < 0) {
       {if (true) throw new ParseException("Illegal negative field id (" + id + ")");}
     }
     fieldIdComments = docComments(valueToken);
     {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

  final public String Optionality() throws ParseException {
   Token opt = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REQUIRED:
      opt = jj_consume_token(REQUIRED);
      break;
    case OPTIONAL:
      opt = jj_consume_token(OPTIONAL);
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return opt.image;}
    throw new Error("Missing return statement in function");
  }

  final public Type DataType() throws ParseException {
  Type type;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOL:
    case BYTE:
    case I16:
    case I32:
    case I64:
    case DOUBLE:
    case STRING:
    case BINARY:
      type = BuiltinType();
      break;
    case MAP:
    case LIST:
    case SET:
      type = ContainerType();
      break;
    case IDENTIFIER:
      type = UserType();
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

  final public Type BuiltinType() throws ParseException {
  Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOL:
      t = jj_consume_token(BOOL);
      break;
    case BYTE:
      t = jj_consume_token(BYTE);
      break;
    case I16:
      t = jj_consume_token(I16);
      break;
    case I32:
      t = jj_consume_token(I32);
      break;
    case I64:
      t = jj_consume_token(I64);
      break;
    case DOUBLE:
      t = jj_consume_token(DOUBLE);
      break;
    case STRING:
      t = jj_consume_token(STRING);
      break;
    case BINARY:
      t = jj_consume_token(BINARY);
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     typeToken = t;
     {if (true) return modelSet.getType(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public Type ContainerType() throws ParseException {
  Type type;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LIST:
      type = ListType();
      break;
    case SET:
      type = SetType();
      break;
    case MAP:
      type = MapType();
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
       {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

  final public MapType MapType() throws ParseException {
  Type keyType = null;
  Type valueType = null;
  Token t;
    t = jj_consume_token(MAP);
    jj_consume_token(LT);
    keyType = DataType();
    jj_consume_token(COMMA);
    valueType = DataType();
    jj_consume_token(99);
       typeToken = t;
       {if (true) return MapType.valueOf(keyType, valueType, modelSet);}
    throw new Error("Missing return statement in function");
  }

  final public ListType ListType() throws ParseException {
  Type elemType = null; Token t;
    t = jj_consume_token(LIST);
    jj_consume_token(LT);
    elemType = DataType();
    jj_consume_token(99);
      typeToken = t;
      {if (true) return ListType.valueOf(elemType, modelSet);}
    throw new Error("Missing return statement in function");
  }

  final public SetType SetType() throws ParseException {
  Type elemType = null; Token t;
    t = jj_consume_token(SET);
    jj_consume_token(LT);
    elemType = DataType();
    jj_consume_token(99);
      typeToken = t;
      {if (true) return SetType.valueOf(elemType, modelSet);}
    throw new Error("Missing return statement in function");
  }

// UserType is either struct or enum or typdef of some other type
  final public Type UserType() throws ParseException {
  String name;
    name = Name();
        typeToken = nameToken;
        Type utype = model.lookupType(name);
        if (utype == null) {
            // allow struct member to access struct type 
            // (non-standard, not currently supported  by Thrift)
            if (currStruct != null && name.equals(currStruct.getName())) {
                {if (true) return currStruct;}
            }
            {if (true) throw new ParseException("Unknown type \u005c"" + name + "\u005c"" + tokenLoc(typeToken));}
        }
        {if (true) return utype;}
    throw new Error("Missing return statement in function");
  }

  final public Object Value() throws ParseException {
   Object v;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_VAL:
      v = I64Literal();
      break;
    case FLOAT_VAL:
      v = DoubleLiteral();
      break;
    case TRUE:
    case FALSE:
      v = BoolLiteral();
      break;
    case STRING_VAL:
      v = StringLiteral();
      break;
    case CHAR_VAL:
      v = CharLiteral();
      break;
    case NULL:
      v = NullLiteral();
      break;
    case LBRACKET:
      v = ListLiteral();
      break;
    case LBRACE:
      v = MapLiteral();
      break;
    case IDENTIFIER:
      v = Name();
          String name = (String)v;
          v = model.lookup(name);
          if (v == null) {
              {if (true) throw new  ParseException("Undefined name \u005c"" + name + "\u005c"" + tokenLoc(nameToken));}
          }
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  final public void EOL() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    case COMMA:
      jj_consume_token(COMMA);
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public String Name() throws ParseException {
    Token seg;
    StringBuilder name = new  StringBuilder(32);
    nameToken = null;
    label_9:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_9;
      }
      seg = jj_consume_token(IDENTIFIER);
      jj_consume_token(DOT);
        name.append(seg.image).append('.');
        if (nameToken==null) nameToken=seg;
    }
    seg = jj_consume_token(IDENTIFIER);
        if (nameToken==null)nameToken=seg;
        {if (true) return name.length() == 0 ? seg.image : name.append(seg.image).toString();}
    throw new Error("Missing return statement in function");
  }

  final public Object NullLiteral() throws ParseException {
    valueToken = jj_consume_token(NULL);
      {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public Boolean BoolLiteral() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      valueToken = jj_consume_token(TRUE);
                          {if (true) return true;}
      break;
    case FALSE:
      valueToken = jj_consume_token(FALSE);
                           {if (true) return false;}
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Byte ByteLiteral() throws ParseException {
    valueToken = jj_consume_token(INT_VAL);
      try {
         {if (true) return ParseUtil.parseByteLiteral(valueToken.image);}
      } catch (NumberFormatException e) {
         {if (true) throw new ParseException(e.getMessage() + tokenLoc(valueToken));}
      }
    throw new Error("Missing return statement in function");
  }

  final public Short I16Literal() throws ParseException {
    valueToken = jj_consume_token(INT_VAL);
      try {
          {if (true) return ParseUtil.parseShortLiteral(valueToken.image);}
      } catch (NumberFormatException e) {
         {if (true) throw new ParseException(e.getMessage() + tokenLoc(valueToken));}
      }
    throw new Error("Missing return statement in function");
  }

  final public Integer I32Literal() throws ParseException {
    valueToken = jj_consume_token(INT_VAL);
      try {
         {if (true) return ParseUtil.parseIntLiteral(valueToken.image);}
      } catch (NumberFormatException e) {
         {if (true) throw new ParseException(e.getMessage() + tokenLoc(valueToken));}
      }
    throw new Error("Missing return statement in function");
  }

  final public Long I64Literal() throws ParseException {
    valueToken = jj_consume_token(INT_VAL);
      try {
         {if (true) return ParseUtil.parseLongLiteral(valueToken.image);}
      } catch (NumberFormatException e) {
         {if (true) throw new ParseException(e.getMessage() + tokenLoc(valueToken));}
      }
    throw new Error("Missing return statement in function");
  }

  final public Double DoubleLiteral() throws ParseException {
    valueToken = jj_consume_token(FLOAT_VAL);
      try {
         {if (true) return Double.valueOf(valueToken.image);}
      } catch (NumberFormatException e) {
         {if (true) throw new ParseException(e.getMessage() + tokenLoc(valueToken));}
      }
    throw new Error("Missing return statement in function");
  }

  final public List<Object> BinaryLiteral() throws ParseException {
  Object o;
  List<Object> charList = new ArrayList<Object>();
    valueToken = jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_VAL:
    case CHAR_VAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT_VAL:
        o = ByteLiteral();
        break;
      case CHAR_VAL:
        o = CharLiteral();
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
         charList.add(o);
      label_10:
      while (true) {
        if (jj_2_2(2)) {
          ;
        } else {
          break label_10;
        }
        jj_consume_token(COMMA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT_VAL:
          o = ByteLiteral();
          break;
        case CHAR_VAL:
          o = CharLiteral();
          break;
        default:
          jj_la1[34] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
            charList.add(o);
      }
      break;
    default:
      jj_la1[35] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
     {if (true) return charList;}
    throw new Error("Missing return statement in function");
  }

  final public String StringLiteral() throws ParseException {
    valueToken = jj_consume_token(STRING_VAL);
       {if (true) return ParseUtil.parseStringLiteral(valueToken.image);}
    throw new Error("Missing return statement in function");
  }

  final public Character CharLiteral() throws ParseException {
    valueToken = jj_consume_token(CHAR_VAL);
     {if (true) return ParseUtil.parseCharLiteral(valueToken.image);}
    throw new Error("Missing return statement in function");
  }

  final public List<Object> ListLiteral() throws ParseException {
   List<Object> list = new ArrayList<Object>();
   Object v;
    valueToken = jj_consume_token(LBRACKET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case NULL:
    case INT_VAL:
    case FLOAT_VAL:
    case CHAR_VAL:
    case STRING_VAL:
    case IDENTIFIER:
    case LBRACE:
    case LBRACKET:
      v = Value();
          list.add(v);
      label_11:
      while (true) {
        if (jj_2_3(2)) {
          ;
        } else {
          break label_11;
        }
        jj_consume_token(COMMA);
        v = Value();
             list.add(v);
      }
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
    if (jj_2_4(2)) {
      jj_consume_token(COMMA);
      jj_consume_token(RBRACKET);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RBRACKET:
        jj_consume_token(RBRACKET);
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public Map<Object,Object> MapLiteral() throws ParseException {
    Map<Object,Object> map = new HashMap<Object,Object>();
    Object k, v;
    valueToken = jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case NULL:
    case INT_VAL:
    case FLOAT_VAL:
    case CHAR_VAL:
    case STRING_VAL:
    case IDENTIFIER:
    case LBRACE:
    case LBRACKET:
      k = Value();
      jj_consume_token(COLON);
      v = Value();
                map.put(k,v);
      label_12:
      while (true) {
        if (jj_2_5(2)) {
          ;
        } else {
          break label_12;
        }
        jj_consume_token(COMMA);
        k = Value();
        jj_consume_token(COLON);
        v = Value();
                  map.put(k,v);
      }
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
    if (jj_2_6(2)) {
      jj_consume_token(COMMA);
      jj_consume_token(RBRACE);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RBRACE:
        jj_consume_token(RBRACE);
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return map;}
    throw new Error("Missing return statement in function");
  }

  final public Map<String, Object> Annotations() throws ParseException {
    Map<String,Object> annos = new HashMap<String,Object>();
    String k;
    Object v;
    valueToken = jj_consume_token(LPAREN);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[40] = jj_gen;
        break label_13;
      }
      k = Name();
      jj_consume_token(ASSIGN);
      v = Value();
                                       annos.put(k, v);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
      case COMMA:
        EOL();
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
      }
    }
    jj_consume_token(RPAREN);
     {if (true) return annos;}
    throw new Error("Missing return statement in function");
  }

  final public void Reserved() throws ParseException {
  Token t;
    t = jj_consume_token(RESERVED);
    {if (true) throw new ParseException("Reserved name \u005c"" + t.image + "\u005c"" + tokenLoc(t));}
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_3R_14() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_1()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) return true;
    }
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(INT_VAL)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(FLOAT_VAL)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(CHAR_VAL)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(INT_VAL)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(STRING_VAL)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ThriftParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[42];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x3000,0x3000,0xe0000000,0xe0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0000000,0x0,0x0,0x0,0x1f3fc000,0x10000000,0xf3fc000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x73fc000,0x3fc000,0x7000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x39,0x39,0x60000000,0x100000,0x60000000,0x60000000,0x0,0x60000000,0x100000,0x0,0x2000,0x2000,0x2,0x100000,0x0,0x100000,0x2000,0x2000,0x4,0x60000000,0xc0,0x0,0x800000,0x60000000,0xc0,0x100000,0x0,0x0,0xa1d2700,0x60000000,0x300,0x42000,0x42000,0x42000,0xa1d2700,0x10000000,0xa1d2700,0x4000000,0x100000,0x60000000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x10000,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[6];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ThriftParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ThriftParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ThriftParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ThriftParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ThriftParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ThriftParser(ThriftParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ThriftParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[100];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 42; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 100; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 6; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
